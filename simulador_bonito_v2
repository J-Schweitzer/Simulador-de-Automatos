import sys
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QLineEdit,
    QHBoxLayout, QFileDialog, QCheckBox
)
from PyQt5.QtCore import QTimer, Qt, QPointF
from PyQt5.QtGui import QPainter, QFont
import math

class Automato:
    def __init__(self):
        self.estados = set()
        self.transicoes = {}  # Transições para múltiplos destinos
        self.estado_atual = set()  # Conjunto de estados ativos (para AFN)
        self.estados_finais = set()
        self.estado_inicial = None

    def adicionar_transicao(self, origem, simbolo, destino):
        self.estados.add(origem)
        self.estados.add(destino)

        chave = (origem, simbolo)
        if chave not in self.transicoes:
            self.transicoes[chave] = set()
        self.transicoes[chave].add(destino)

    def definir_estado_inicial(self, estado):
        self.estado_inicial = estado
        self.estado_atual = {estado}

    def definir_estados_finais(self, finais):
        self.estados_finais = set(finais)

    def proximo_estado(self, simbolo):
        """Retorna o conjunto de estados alcançáveis pelo símbolo."""
        novos_estados = set()
        for estado in self.estado_atual:
            chave = (estado, simbolo)
            if chave in self.transicoes:
                novos_estados.update(self.transicoes[chave])

            # Adiciona transições em vazio
            chave_epsilon = (estado, '%')
            if chave_epsilon in self.transicoes:
                novos_estados.update(self.transicoes[chave_epsilon])

        return novos_estados


class SimulatorApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Configuração e Simulação de Autômato")
        self.setGeometry(100, 100, 800, 600)

        # Componentes de entrada e botões
        self.label = QLabel("Configuração do Autômato:", self)
        self.label.setAlignment(Qt.AlignCenter)

        self.input_estado_inicial = QLineEdit(self)
        self.input_estado_inicial.setPlaceholderText("Estado Inicial")
        self.input_estados_finais = QLineEdit(self)
        self.input_estados_finais.setPlaceholderText("Estados Finais (separados por vírgula)")

        self.input_transicao_origem = QLineEdit(self)
        self.input_transicao_origem.setPlaceholderText("Estado de Origem")
        self.input_transicao_simbolo = QLineEdit(self)
        self.input_transicao_simbolo.setPlaceholderText("Símbolo")
        self.input_transicao_destino = QLineEdit(self)
        self.input_transicao_destino.setPlaceholderText("Estado de Destino")
        self.input_transicao_epsilon = QCheckBox("Transição em Vazio (ε)", self)
        self.botao_adicionar_transicao = QPushButton("Adicionar Transição", self)
        self.botao_adicionar_transicao.clicked.connect(self.adicionar_transicao)

        self.input_cadeia = QLineEdit(self)
        self.input_cadeia.setPlaceholderText("Digite a cadeia para simulação")
        self.start_button = QPushButton("Iniciar Simulação", self)
        self.start_button.clicked.connect(self.iniciar_simulacao)

        self.botao_salvar = QPushButton("Salvar Projeto", self)
        self.botao_salvar.clicked.connect(self.salvar_projeto)
        self.botao_carregar = QPushButton("Carregar Projeto", self)
        self.botao_carregar.clicked.connect(self.carregar_projeto)

        # Layout
        layout = QVBoxLayout()
        layout.addWidget(self.label)

        layout_config = QHBoxLayout()
        layout_config.addWidget(self.input_estado_inicial)
        layout_config.addWidget(self.input_estados_finais)
        layout.addLayout(layout_config)

        layout_transicoes = QHBoxLayout()
        layout_transicoes.addWidget(self.input_transicao_origem)
        layout_transicoes.addWidget(self.input_transicao_simbolo)
        layout_transicoes.addWidget(self.input_transicao_destino)
        layout_transicoes.addWidget(self.botao_adicionar_transicao)
        layout.addLayout(layout_transicoes)

        layout.addWidget(self.input_cadeia)
        layout.addWidget(self.start_button)
        layout.addWidget(self.botao_salvar)
        layout.addWidget(self.botao_carregar)

        self.setLayout(layout)

        # Timer e autômato
        self.timer = QTimer()
        self.timer.timeout.connect(self.proximo_passo)

        self.automato = Automato()
        self.cadeia = ""
        self.index = 0

    def paintEvent(self, event):
        """Desenha os estados e transições."""
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)

        # Desenhar estados
        for estado in self.automato.estados:
            pos = self.calcular_posicao_estado(estado)
            self.desenhar_estado(painter, pos, estado, estado in self.automato.estados_finais)

        # Desenhar transições
        for (origem, simbolo), destinos in self.automato.transicoes.items():
            for destino in destinos:
                origem_pos = self.calcular_posicao_estado(origem)
                destino_pos = self.calcular_posicao_estado(destino)
                self.desenhar_transicao(painter, origem_pos, destino_pos, simbolo)

    def calcular_posicao_estado(self, estado):
        """Calcula uma posição para cada estado."""
        idx = list(self.automato.estados).index(estado)
        angle = 2 * math.pi * idx / len(self.automato.estados)
        center = QPointF(self.width() / 2, self.height() / 2)
        radius = 150
        x = center.x() + radius * math.cos(angle)
        y = center.y() + radius * math.sin(angle)
        return QPointF(x, y)

    def desenhar_estado(self, painter, pos, nome, final):
        """Desenha estados."""
        radius = 30
        painter.setBrush(Qt.white)
        painter.setPen(Qt.black)
        painter.drawEllipse(pos.x() - radius, pos.y() - radius, 2 * radius, 2 * radius)
        if final:
            painter.drawEllipse(pos.x() - radius + 5, pos.y() - radius + 5, 2 * radius - 10, 2 * radius - 10)
        painter.drawText(pos.x() - 10, pos.y() + 5, nome)

    def desenhar_transicao(self, painter, origem, destino, simbolo):
        """Desenha uma transição."""
        painter.drawLine(origem, destino)
        meio = QPointF((origem.x() + destino.x()) / 2, (origem.y() + destino.y()) / 2)
        painter.drawText(meio, simbolo)

    def adicionar_transicao(self):
        origem = self.input_transicao_origem.text().strip()
        simbolo = self.input_transicao_simbolo.text().strip() or '%'
        destino = self.input_transicao_destino.text().strip()

        if origem and destino:
            self.automato.adicionar_transicao(origem, simbolo, destino)

    def iniciar_simulacao(self):
        self.automato.definir_estado_inicial(self.input_estado_inicial.text())
        self.automato.definir_estados_finais(self.input_estados_finais.text().split(","))
        self.cadeia = self.input_cadeia.text()
        self.index = 0
        self.timer.start(1000)

    def proximo_passo(self):
        if self.index < len(self.cadeia):
            simbolo = self.cadeia[self.index]
            self.automato.estado_atual = self.automato.proximo_estado(simbolo)
            self.index += 1
        else:
            self.timer.stop()
